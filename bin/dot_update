#! /usr/bin/env bash

echo
date +'%d.%m.%Y %H:%M:%S'

echo
echo "Running update script"

# setup envvar
echo "› setting up environmental variables"

export DOTFILES_ROOT="${HOME}/.dotfiles"
export DOTFILES_LIBS_ROOT="${DOTFILES_ROOT}/libs"
export DOTFILES_MODULES_ROOT="${DOTFILES_ROOT}/modules"
export DOTFILES_INSTALLATION_ROOT="${DOTFILES_ROOT}/installation"

# create update progress file
touch "${DOTFILES_ROOT}/.dot_update"

echo "› cding inside dotfiles directory"
cd "${DOTFILES_ROOT}" || { >&2 echo "Cannot cd into ${DOTFILES_ROOT}."; exit 1; }

# fixes PATH (we could be running from the crontab)
PATH="/opt/homebrew/bin:$(command -p getconf PATH)"

# load custom config if any
if [[ -r ~/.localrc ]]; then
    echo "› loading custom config ~/.localrc"
    . ~/.localrc
fi

# load libraries
echo "› loading helper functions"
. "${DOTFILES_LIBS_ROOT}/helpers.sh"

# detect OS
echo "› detecting OS"
os_detection

# check prerequisites
echo "› checking prerequisites"
. "${DOTFILES_INSTALLATION_ROOT}/check-prerequisites.sh"

# ssh would not work under cron, add a https one
echo "› setting up update channel"
git remote add updates "https://github.com/shandOsh/dotfiles.git" 2>/dev/null

# get current commit-id
echo "› getting installed version"
installed_version="$(git rev-parse --short HEAD)"

# update repo
echo "› git update"
echo
git pull --tags --rebase --stat updates "$(git rev-parse --abbrev-ref HEAD)"
rc=${?}
echo

if [[ ${rc} -ne 0 ]]; then
    echo
    echo "There was an error merging remote changes."
    exit 1
fi

# get current commit-id
echo "› getting downloaded version"
downloaded_version="$(git rev-parse --short HEAD)"

# load libraries
echo "› loading libraries"

. "${DOTFILES_LIBS_ROOT}/fidian/ansi/ansi"
. "${DOTFILES_LIBS_ROOT}/formatting.sh"
. "${DOTFILES_LIBS_ROOT}/helpers.sh"

# detect OS
echo "› detecting OS"
os_detection

# force mode
force_mode=0

if [[ ${#} -eq 1 ]] && [[ "${1}" =~ ^(-f|--force)$ ]]; then
    force_mode=1
fi

if [[ "${force_mode}" -eq 1 ]] || [[ "${downloaded_version}" != "${installed_version}" ]]; then
    # run generic install script
    . "${DOTFILES_INSTALLATION_ROOT}/install.sh"
else
    # TODO: maybe add force mode?
    echo "› no new changes downloaded, skipping installation steps"
fi

echo "› registering last update"
git config --global dotfiles.lastupdate "$(date +'%d.%m.%Y %H:%M')"

# remove update progress file
rm -f "${DOTFILES_ROOT}/.dot_update"
